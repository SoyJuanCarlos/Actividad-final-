
reloj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000b68  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016bd  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa7  00000000  00000000  00002475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b07  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ac  00000000  00000000  00003a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000572  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b55  00000000  00000000  00004242  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  8e:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
uint8_t read_i2c()
{
	TWCR = (1<<TWINT)|(1<<TWEN); //Lectura sin reconocimiento (TWEA=0)
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
	return TWDR; //Regresa el valor leído
}
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
  b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ba:	88 23       	and	r24, r24
  bc:	e4 f7       	brge	.-8      	; 0xb6 <start+0xe>
  be:	08 95       	ret

000000c0 <stop>:
  c0:	84 e9       	ldi	r24, 0x94	; 148
  c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <stop+0xa>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <stop+0x10>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <write_i2c>:
  d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d8:	84 ec       	ldi	r24, 0xC4	; 196
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e2:	88 23       	and	r24, r24
  e4:	e4 f7       	brge	.-8      	; 0xde <write_i2c+0xa>
  e6:	08 95       	ret

000000e8 <i2c_read_ack>:


uint8_t i2c_read_ack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
  e8:	84 ec       	ldi	r24, 0xC4	; 196
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que termine
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <i2c_read_ack+0x6>
	return TWDR;
  f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  fa:	08 95       	ret

000000fc <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que termine
 102:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 106:	88 23       	and	r24, r24
 108:	e4 f7       	brge	.-8      	; 0x102 <i2c_read_nack+0x6>
	return TWDR;
 10a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 10e:	08 95       	ret

00000110 <lcd_i2c_reset>:
	if(value<0) lcd_i2c_data('-');
	for(i=j;i<5;i++)
	{
		lcd_i2c_data(48+str[i]);
	}
}
 110:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 114:	8e e4       	ldi	r24, 0x4E	; 78
 116:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	93 e1       	ldi	r25, 0x13	; 19
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_i2c_reset+0x14>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_i2c_reset+0x1a>
 12a:	00 00       	nop
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 138:	83 ec       	ldi	r24, 0xC3	; 195
 13a:	99 e0       	ldi	r25, 0x09	; 9
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_i2c_reset+0x2c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_i2c_reset+0x32>
 142:	00 00       	nop
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_i2c_reset+0x44>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_i2c_reset+0x4a>
 15a:	00 00       	nop
 15c:	84 e3       	ldi	r24, 0x34	; 52
 15e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_i2c_reset+0x5c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_i2c_reset+0x62>
 172:	00 00       	nop
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_i2c_reset+0x74>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_i2c_reset+0x7a>
 18a:	00 00       	nop
 18c:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
 190:	08 95       	ret

00000192 <lcd_i2c_cmd>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 19c:	8e e4       	ldi	r24, 0x4E	; 78
 19e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 1a2:	dc 2f       	mov	r29, r28
 1a4:	d0 7f       	andi	r29, 0xF0	; 240
 1a6:	8d 2f       	mov	r24, r29
 1a8:	8c 60       	ori	r24, 0x0C	; 12
 1aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 1ae:	8d 2f       	mov	r24, r29
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	c8 9f       	mul	r28, r24
 1ba:	e0 01       	movw	r28, r0
 1bc:	11 24       	eor	r1, r1
 1be:	8c 2f       	mov	r24, r28
 1c0:	8c 60       	ori	r24, 0x0C	; 12
 1c2:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 1cc:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
 1d0:	83 ef       	ldi	r24, 0xF3	; 243
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_i2c_cmd+0x42>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_i2c_cmd+0x48>
 1da:	00 00       	nop
 1dc:	83 ef       	ldi	r24, 0xF3	; 243
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_i2c_cmd+0x4e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_i2c_cmd+0x54>
 1e6:	00 00       	nop
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd_i2c_init>:
 1ee:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1f2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_i2c_reset>
 1f6:	8c e2       	ldi	r24, 0x2C	; 44
 1f8:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_i2c_cmd>
 1fc:	8c e0       	ldi	r24, 0x0C	; 12
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_i2c_cmd>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_i2c_cmd>
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_i2c_cmd>
 20e:	08 95       	ret

00000210 <lcd_i2c_data>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	c8 2f       	mov	r28, r24
 216:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 21a:	8e e4       	ldi	r24, 0x4E	; 78
 21c:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 220:	dc 2f       	mov	r29, r28
 222:	d0 7f       	andi	r29, 0xF0	; 240
 224:	8d 2f       	mov	r24, r29
 226:	8d 60       	ori	r24, 0x0D	; 13
 228:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 22c:	8d 2f       	mov	r24, r29
 22e:	89 60       	ori	r24, 0x09	; 9
 230:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 234:	80 e1       	ldi	r24, 0x10	; 16
 236:	c8 9f       	mul	r28, r24
 238:	e0 01       	movw	r28, r0
 23a:	11 24       	eor	r1, r1
 23c:	8c 2f       	mov	r24, r28
 23e:	8d 60       	ori	r24, 0x0D	; 13
 240:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 244:	8c 2f       	mov	r24, r28
 246:	89 60       	ori	r24, 0x09	; 9
 248:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
 24c:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
 250:	83 ef       	ldi	r24, 0xF3	; 243
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_i2c_data+0x44>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_i2c_data+0x4a>
 25a:	00 00       	nop
 25c:	83 ef       	ldi	r24, 0xF3	; 243
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_i2c_data+0x50>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_i2c_data+0x56>
 266:	00 00       	nop
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <lcd_i2c_col_row>:
 26e:	e6 2f       	mov	r30, r22
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e1 50       	subi	r30, 0x01	; 1
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	90 81       	ld	r25, Z
 278:	89 0f       	add	r24, r25
 27a:	81 58       	subi	r24, 0x81	; 129
 27c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_i2c_cmd>
 280:	08 95       	ret

00000282 <lcd_i2c_clr>:
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_i2c_cmd>
 288:	83 ef       	ldi	r24, 0xF3	; 243
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_i2c_clr+0xa>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_i2c_clr+0x10>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <lcd_i2c_write_string>:
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	8c 01       	movw	r16, r24
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <lcd_i2c_write_string+0x16>
 2a6:	0e 94 08 01 	call	0x210	; 0x210 <lcd_i2c_data>
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	f8 01       	movw	r30, r16
 2ae:	ec 0f       	add	r30, r28
 2b0:	fd 1f       	adc	r31, r29
 2b2:	80 81       	ld	r24, Z
 2b4:	81 11       	cpse	r24, r1
 2b6:	f7 cf       	rjmp	.-18     	; 0x2a6 <lcd_i2c_write_string+0x10>
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <lcd_i2c_printf>:



void lcd_i2c_printf(const char *format, ...) {
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	a0 97       	sbiw	r28, 0x20	; 32
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	9e 01       	movw	r18, r28
 2d8:	2b 5d       	subi	r18, 0xDB	; 219
 2da:	3f 4f       	sbci	r19, 0xFF	; 255
 2dc:	f9 01       	movw	r30, r18
 2de:	41 91       	ld	r20, Z+
 2e0:	51 91       	ld	r21, Z+
 2e2:	9f 01       	movw	r18, r30
	char buffer[32];
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args);
 2e4:	60 e2       	ldi	r22, 0x20	; 32
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	0e 94 be 02 	call	0x57c	; 0x57c <vsnprintf>
	va_end(args);
	//lcd_i2c_printf(buffer);
	lcd_i2c_write_string(buffer);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_i2c_write_string>
}
 2f8:	a0 96       	adiw	r28, 0x20	; 32
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <main>:


int main(void)
{
	
	init_i2c();
 30a:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
	lcd_i2c_init();
 30e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_i2c_init>
	rtc_init();
 312:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <rtc_init>
	
	lcd_i2c_clr();
 316:	0e 94 41 01 	call	0x282	; 0x282 <lcd_i2c_clr>
	
	rtc_set_time(23, 59, 57);   // HH, MM, SS
 31a:	49 e3       	ldi	r20, 0x39	; 57
 31c:	6b e3       	ldi	r22, 0x3B	; 59
 31e:	87 e1       	ldi	r24, 0x17	; 23
 320:	0e 94 01 02 	call	0x402	; 0x402 <rtc_set_time>
	rtc_set_date(5, 12, 2024); // DD, MM, YYYY
 324:	48 ee       	ldi	r20, 0xE8	; 232
 326:	57 e0       	ldi	r21, 0x07	; 7
 328:	6c e0       	ldi	r22, 0x0C	; 12
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	0e 94 4c 02 	call	0x498	; 0x498 <rtc_set_date>
	
    
    while (1) 
	{
		// Leer tiempo y fecha
		Time time = rtc_get_time();
 330:	0e 94 24 02 	call	0x448	; 0x448 <rtc_get_time>
 334:	d6 2e       	mov	r13, r22
 336:	e7 2e       	mov	r14, r23
 338:	f8 2e       	mov	r15, r24
		Date date = rtc_get_date();
 33a:	0e 94 81 02 	call	0x502	; 0x502 <rtc_get_date>
 33e:	c6 2f       	mov	r28, r22
 340:	d7 2f       	mov	r29, r23
 342:	18 2f       	mov	r17, r24
 344:	09 2f       	mov	r16, r25

		// Mostrar en el LCD
		
		
		lcd_i2c_col_row(5, 1);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_i2c_col_row>
		lcd_i2c_printf("%02d:%02d:%02d", time.hours, time.minutes, time.seconds);
 34e:	1f 92       	push	r1
 350:	df 92       	push	r13
 352:	1f 92       	push	r1
 354:	ef 92       	push	r14
 356:	1f 92       	push	r1
 358:	ff 92       	push	r15
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	9f 93       	push	r25
 360:	8f 93       	push	r24
 362:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_i2c_printf>
		
		lcd_i2c_col_row(4, 2);
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_i2c_col_row>
		lcd_i2c_printf("%02d/%02d/%04d", date.day, date.month, date.year);
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	1f 92       	push	r1
 374:	df 93       	push	r29
 376:	1f 92       	push	r1
 378:	cf 93       	push	r28
 37a:	81 e1       	ldi	r24, 0x11	; 17
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	9f 93       	push	r25
 380:	8f 93       	push	r24
 382:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_i2c_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	2f e3       	ldi	r18, 0x3F	; 63
 388:	8d e0       	ldi	r24, 0x0D	; 13
 38a:	93 e0       	ldi	r25, 0x03	; 3
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x82>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x8c>
 396:	00 00       	nop
 398:	8d b7       	in	r24, 0x3d	; 61
 39a:	9e b7       	in	r25, 0x3e	; 62
 39c:	40 96       	adiw	r24, 0x10	; 16
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	9e bf       	out	0x3e, r25	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	8d bf       	out	0x3d, r24	; 61
 3a8:	c3 cf       	rjmp	.-122    	; 0x330 <main+0x26>

000003aa <bcd_to_decimal>:
#include "i2c.h"

#define DS1307_ADDR 0x68

static uint8_t bcd_to_decimal(uint8_t bcd) {
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 3aa:	98 2f       	mov	r25, r24
 3ac:	92 95       	swap	r25
 3ae:	9f 70       	andi	r25, 0x0F	; 15
 3b0:	99 0f       	add	r25, r25
 3b2:	29 2f       	mov	r18, r25
 3b4:	22 0f       	add	r18, r18
 3b6:	22 0f       	add	r18, r18
 3b8:	92 0f       	add	r25, r18
 3ba:	8f 70       	andi	r24, 0x0F	; 15
}
 3bc:	89 0f       	add	r24, r25
 3be:	08 95       	ret

000003c0 <decimal_to_bcd>:

static uint8_t decimal_to_bcd(uint8_t dec) {
	return ((dec / 10) << 4) | (dec % 10);
 3c0:	9d ec       	ldi	r25, 0xCD	; 205
 3c2:	89 9f       	mul	r24, r25
 3c4:	91 2d       	mov	r25, r1
 3c6:	11 24       	eor	r1, r1
 3c8:	96 95       	lsr	r25
 3ca:	96 95       	lsr	r25
 3cc:	96 95       	lsr	r25
 3ce:	20 e1       	ldi	r18, 0x10	; 16
 3d0:	92 9f       	mul	r25, r18
 3d2:	a0 01       	movw	r20, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	99 0f       	add	r25, r25
 3d8:	29 2f       	mov	r18, r25
 3da:	22 0f       	add	r18, r18
 3dc:	22 0f       	add	r18, r18
 3de:	92 0f       	add	r25, r18
 3e0:	89 1b       	sub	r24, r25
}
 3e2:	84 2b       	or	r24, r20
 3e4:	08 95       	ret

000003e6 <rtc_init>:

void rtc_init(void) {
	start();
 3e6:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c(DS1307_ADDR << 1);
 3ea:	80 ed       	ldi	r24, 0xD0	; 208
 3ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(0x00); // Dirección del registro de segundos
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(0x00); // Habilitar el reloj
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	stop();
 3fc:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
 400:	08 95       	ret

00000402 <rtc_set_time>:
}



void rtc_set_time(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	c8 2f       	mov	r28, r24
 40a:	d6 2f       	mov	r29, r22
 40c:	14 2f       	mov	r17, r20
	start();
 40e:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c(DS1307_ADDR << 1);
 412:	80 ed       	ldi	r24, 0xD0	; 208
 414:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(0x00); // Registro de segundos
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(decimal_to_bcd(seconds));
 41e:	81 2f       	mov	r24, r17
 420:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <decimal_to_bcd>
 424:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(decimal_to_bcd(minutes));
 428:	8d 2f       	mov	r24, r29
 42a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <decimal_to_bcd>
 42e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(decimal_to_bcd(hours));
 432:	8c 2f       	mov	r24, r28
 434:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <decimal_to_bcd>
 438:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	stop();
 43c:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	08 95       	ret

00000448 <rtc_get_time>:


Time rtc_get_time(void) {
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
	Time time;
	start();
 44e:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c(DS1307_ADDR << 1);
 452:	80 ed       	ldi	r24, 0xD0	; 208
 454:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(0x00); // Registro de segundos
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	start();
 45e:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c((DS1307_ADDR << 1) | 1); // Leer
 462:	81 ed       	ldi	r24, 0xD1	; 209
 464:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	time.seconds = bcd_to_decimal(i2c_read_ack());
 468:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_read_ack>
 46c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <bcd_to_decimal>
 470:	18 2f       	mov	r17, r24
	time.minutes = bcd_to_decimal(i2c_read_ack());
 472:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_read_ack>
 476:	0e 94 d5 01 	call	0x3aa	; 0x3aa <bcd_to_decimal>
 47a:	d8 2f       	mov	r29, r24
	time.hours = bcd_to_decimal(i2c_read_nack());
 47c:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c_read_nack>
 480:	0e 94 d5 01 	call	0x3aa	; 0x3aa <bcd_to_decimal>
 484:	c8 2f       	mov	r28, r24
	stop();
 486:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
	return time;
}
 48a:	61 2f       	mov	r22, r17
 48c:	7d 2f       	mov	r23, r29
 48e:	8c 2f       	mov	r24, r28
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	08 95       	ret

00000498 <rtc_set_date>:

void rtc_set_date(uint8_t day, uint8_t month, uint16_t year) {
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	08 2f       	mov	r16, r24
 4a2:	16 2f       	mov	r17, r22
 4a4:	ea 01       	movw	r28, r20
	start();
 4a6:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c(DS1307_ADDR << 1);
 4aa:	80 ed       	ldi	r24, 0xD0	; 208
 4ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(0x04); // Registro de día
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(decimal_to_bcd(day));
 4b6:	80 2f       	mov	r24, r16
 4b8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <decimal_to_bcd>
 4bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(decimal_to_bcd(month));
 4c0:	81 2f       	mov	r24, r17
 4c2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <decimal_to_bcd>
 4c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(decimal_to_bcd(year % 100)); // Año (2 dígitos)
 4ca:	9e 01       	movw	r18, r28
 4cc:	36 95       	lsr	r19
 4ce:	27 95       	ror	r18
 4d0:	36 95       	lsr	r19
 4d2:	27 95       	ror	r18
 4d4:	ab e7       	ldi	r26, 0x7B	; 123
 4d6:	b4 e1       	ldi	r27, 0x14	; 20
 4d8:	0e 94 af 02 	call	0x55e	; 0x55e <__umulhisi3>
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	3c 2f       	mov	r19, r28
 4e2:	24 e6       	ldi	r18, 0x64	; 100
 4e4:	82 9f       	mul	r24, r18
 4e6:	30 19       	sub	r19, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	83 2f       	mov	r24, r19
 4ec:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <decimal_to_bcd>
 4f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	stop();
 4f4:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	08 95       	ret

00000502 <rtc_get_date>:

Date rtc_get_date(void) {
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
	Date date;
	start();
 50a:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c(DS1307_ADDR << 1);
 50e:	80 ed       	ldi	r24, 0xD0	; 208
 510:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	write_i2c(0x04); // Registro de día
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	start();
 51a:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
	write_i2c((DS1307_ADDR << 1) | 1); // Leer
 51e:	81 ed       	ldi	r24, 0xD1	; 209
 520:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_i2c>
	date.day = bcd_to_decimal(i2c_read_ack());
 524:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_read_ack>
 528:	0e 94 d5 01 	call	0x3aa	; 0x3aa <bcd_to_decimal>
 52c:	08 2f       	mov	r16, r24
	date.month = bcd_to_decimal(i2c_read_ack());
 52e:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_read_ack>
 532:	0e 94 d5 01 	call	0x3aa	; 0x3aa <bcd_to_decimal>
 536:	18 2f       	mov	r17, r24
	date.year = 2000 + bcd_to_decimal(i2c_read_nack());
 538:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c_read_nack>
 53c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <bcd_to_decimal>
 540:	c8 2f       	mov	r28, r24
 542:	d0 e0       	ldi	r29, 0x00	; 0
 544:	c0 53       	subi	r28, 0x30	; 48
 546:	d8 4f       	sbci	r29, 0xF8	; 248
	stop();
 548:	0e 94 60 00 	call	0xc0	; 0xc0 <stop>
	return date;
}
 54c:	60 2f       	mov	r22, r16
 54e:	71 2f       	mov	r23, r17
 550:	8c 2f       	mov	r24, r28
 552:	9d 2f       	mov	r25, r29
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <__umulhisi3>:
 55e:	a2 9f       	mul	r26, r18
 560:	b0 01       	movw	r22, r0
 562:	b3 9f       	mul	r27, r19
 564:	c0 01       	movw	r24, r0
 566:	a3 9f       	mul	r26, r19
 568:	70 0d       	add	r23, r0
 56a:	81 1d       	adc	r24, r1
 56c:	11 24       	eor	r1, r1
 56e:	91 1d       	adc	r25, r1
 570:	b2 9f       	mul	r27, r18
 572:	70 0d       	add	r23, r0
 574:	81 1d       	adc	r24, r1
 576:	11 24       	eor	r1, r1
 578:	91 1d       	adc	r25, r1
 57a:	08 95       	ret

0000057c <vsnprintf>:
 57c:	ae e0       	ldi	r26, 0x0E	; 14
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e4 ec       	ldi	r30, 0xC4	; 196
 582:	f2 e0       	ldi	r31, 0x02	; 2
 584:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__prologue_saves__+0x1c>
 588:	8c 01       	movw	r16, r24
 58a:	fa 01       	movw	r30, r20
 58c:	86 e0       	ldi	r24, 0x06	; 6
 58e:	8c 83       	std	Y+4, r24	; 0x04
 590:	1a 83       	std	Y+2, r17	; 0x02
 592:	09 83       	std	Y+1, r16	; 0x01
 594:	77 ff       	sbrs	r23, 7
 596:	02 c0       	rjmp	.+4      	; 0x59c <vsnprintf+0x20>
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	70 e8       	ldi	r23, 0x80	; 128
 59c:	cb 01       	movw	r24, r22
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	9e 83       	std	Y+6, r25	; 0x06
 5a2:	8d 83       	std	Y+5, r24	; 0x05
 5a4:	a9 01       	movw	r20, r18
 5a6:	bf 01       	movw	r22, r30
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vfprintf>
 5b0:	4d 81       	ldd	r20, Y+5	; 0x05
 5b2:	5e 81       	ldd	r21, Y+6	; 0x06
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	0a c0       	rjmp	.+20     	; 0x5cc <vsnprintf+0x50>
 5b8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ba:	38 85       	ldd	r19, Y+8	; 0x08
 5bc:	42 17       	cp	r20, r18
 5be:	53 07       	cpc	r21, r19
 5c0:	0c f4       	brge	.+2      	; 0x5c4 <vsnprintf+0x48>
 5c2:	9a 01       	movw	r18, r20
 5c4:	f8 01       	movw	r30, r16
 5c6:	e2 0f       	add	r30, r18
 5c8:	f3 1f       	adc	r31, r19
 5ca:	10 82       	st	Z, r1
 5cc:	2e 96       	adiw	r28, 0x0e	; 14
 5ce:	e4 e0       	ldi	r30, 0x04	; 4
 5d0:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__epilogue_restores__+0x1c>

000005d4 <vfprintf>:
 5d4:	ab e0       	ldi	r26, 0x0B	; 11
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e0 ef       	ldi	r30, 0xF0	; 240
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__prologue_saves__>
 5e0:	6c 01       	movw	r12, r24
 5e2:	7b 01       	movw	r14, r22
 5e4:	8a 01       	movw	r16, r20
 5e6:	fc 01       	movw	r30, r24
 5e8:	17 82       	std	Z+7, r1	; 0x07
 5ea:	16 82       	std	Z+6, r1	; 0x06
 5ec:	83 81       	ldd	r24, Z+3	; 0x03
 5ee:	81 ff       	sbrs	r24, 1
 5f0:	cc c1       	rjmp	.+920    	; 0x98a <__stack+0x8b>
 5f2:	ce 01       	movw	r24, r28
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	3c 01       	movw	r6, r24
 5f8:	f6 01       	movw	r30, r12
 5fa:	93 81       	ldd	r25, Z+3	; 0x03
 5fc:	f7 01       	movw	r30, r14
 5fe:	93 fd       	sbrc	r25, 3
 600:	85 91       	lpm	r24, Z+
 602:	93 ff       	sbrs	r25, 3
 604:	81 91       	ld	r24, Z+
 606:	7f 01       	movw	r14, r30
 608:	88 23       	and	r24, r24
 60a:	09 f4       	brne	.+2      	; 0x60e <vfprintf+0x3a>
 60c:	ba c1       	rjmp	.+884    	; 0x982 <__stack+0x83>
 60e:	85 32       	cpi	r24, 0x25	; 37
 610:	39 f4       	brne	.+14     	; 0x620 <vfprintf+0x4c>
 612:	93 fd       	sbrc	r25, 3
 614:	85 91       	lpm	r24, Z+
 616:	93 ff       	sbrs	r25, 3
 618:	81 91       	ld	r24, Z+
 61a:	7f 01       	movw	r14, r30
 61c:	85 32       	cpi	r24, 0x25	; 37
 61e:	29 f4       	brne	.+10     	; 0x62a <vfprintf+0x56>
 620:	b6 01       	movw	r22, r12
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 628:	e7 cf       	rjmp	.-50     	; 0x5f8 <vfprintf+0x24>
 62a:	91 2c       	mov	r9, r1
 62c:	21 2c       	mov	r2, r1
 62e:	31 2c       	mov	r3, r1
 630:	ff e1       	ldi	r31, 0x1F	; 31
 632:	f3 15       	cp	r31, r3
 634:	d8 f0       	brcs	.+54     	; 0x66c <vfprintf+0x98>
 636:	8b 32       	cpi	r24, 0x2B	; 43
 638:	79 f0       	breq	.+30     	; 0x658 <vfprintf+0x84>
 63a:	38 f4       	brcc	.+14     	; 0x64a <vfprintf+0x76>
 63c:	80 32       	cpi	r24, 0x20	; 32
 63e:	79 f0       	breq	.+30     	; 0x65e <vfprintf+0x8a>
 640:	83 32       	cpi	r24, 0x23	; 35
 642:	a1 f4       	brne	.+40     	; 0x66c <vfprintf+0x98>
 644:	23 2d       	mov	r18, r3
 646:	20 61       	ori	r18, 0x10	; 16
 648:	1d c0       	rjmp	.+58     	; 0x684 <vfprintf+0xb0>
 64a:	8d 32       	cpi	r24, 0x2D	; 45
 64c:	61 f0       	breq	.+24     	; 0x666 <vfprintf+0x92>
 64e:	80 33       	cpi	r24, 0x30	; 48
 650:	69 f4       	brne	.+26     	; 0x66c <vfprintf+0x98>
 652:	23 2d       	mov	r18, r3
 654:	21 60       	ori	r18, 0x01	; 1
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0xb0>
 658:	83 2d       	mov	r24, r3
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	38 2e       	mov	r3, r24
 65e:	e3 2d       	mov	r30, r3
 660:	e4 60       	ori	r30, 0x04	; 4
 662:	3e 2e       	mov	r3, r30
 664:	2a c0       	rjmp	.+84     	; 0x6ba <vfprintf+0xe6>
 666:	f3 2d       	mov	r31, r3
 668:	f8 60       	ori	r31, 0x08	; 8
 66a:	1d c0       	rjmp	.+58     	; 0x6a6 <vfprintf+0xd2>
 66c:	37 fc       	sbrc	r3, 7
 66e:	2d c0       	rjmp	.+90     	; 0x6ca <vfprintf+0xf6>
 670:	20 ed       	ldi	r18, 0xD0	; 208
 672:	28 0f       	add	r18, r24
 674:	2a 30       	cpi	r18, 0x0A	; 10
 676:	40 f0       	brcs	.+16     	; 0x688 <vfprintf+0xb4>
 678:	8e 32       	cpi	r24, 0x2E	; 46
 67a:	b9 f4       	brne	.+46     	; 0x6aa <vfprintf+0xd6>
 67c:	36 fc       	sbrc	r3, 6
 67e:	81 c1       	rjmp	.+770    	; 0x982 <__stack+0x83>
 680:	23 2d       	mov	r18, r3
 682:	20 64       	ori	r18, 0x40	; 64
 684:	32 2e       	mov	r3, r18
 686:	19 c0       	rjmp	.+50     	; 0x6ba <vfprintf+0xe6>
 688:	36 fe       	sbrs	r3, 6
 68a:	06 c0       	rjmp	.+12     	; 0x698 <vfprintf+0xc4>
 68c:	8a e0       	ldi	r24, 0x0A	; 10
 68e:	98 9e       	mul	r9, r24
 690:	20 0d       	add	r18, r0
 692:	11 24       	eor	r1, r1
 694:	92 2e       	mov	r9, r18
 696:	11 c0       	rjmp	.+34     	; 0x6ba <vfprintf+0xe6>
 698:	ea e0       	ldi	r30, 0x0A	; 10
 69a:	2e 9e       	mul	r2, r30
 69c:	20 0d       	add	r18, r0
 69e:	11 24       	eor	r1, r1
 6a0:	22 2e       	mov	r2, r18
 6a2:	f3 2d       	mov	r31, r3
 6a4:	f0 62       	ori	r31, 0x20	; 32
 6a6:	3f 2e       	mov	r3, r31
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <vfprintf+0xe6>
 6aa:	8c 36       	cpi	r24, 0x6C	; 108
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <vfprintf+0xe2>
 6ae:	83 2d       	mov	r24, r3
 6b0:	80 68       	ori	r24, 0x80	; 128
 6b2:	38 2e       	mov	r3, r24
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <vfprintf+0xe6>
 6b6:	88 36       	cpi	r24, 0x68	; 104
 6b8:	41 f4       	brne	.+16     	; 0x6ca <vfprintf+0xf6>
 6ba:	f7 01       	movw	r30, r14
 6bc:	93 fd       	sbrc	r25, 3
 6be:	85 91       	lpm	r24, Z+
 6c0:	93 ff       	sbrs	r25, 3
 6c2:	81 91       	ld	r24, Z+
 6c4:	7f 01       	movw	r14, r30
 6c6:	81 11       	cpse	r24, r1
 6c8:	b3 cf       	rjmp	.-154    	; 0x630 <vfprintf+0x5c>
 6ca:	98 2f       	mov	r25, r24
 6cc:	9f 7d       	andi	r25, 0xDF	; 223
 6ce:	95 54       	subi	r25, 0x45	; 69
 6d0:	93 30       	cpi	r25, 0x03	; 3
 6d2:	28 f4       	brcc	.+10     	; 0x6de <vfprintf+0x10a>
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	9f e3       	ldi	r25, 0x3F	; 63
 6da:	99 83       	std	Y+1, r25	; 0x01
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <vfprintf+0x124>
 6de:	83 36       	cpi	r24, 0x63	; 99
 6e0:	31 f0       	breq	.+12     	; 0x6ee <vfprintf+0x11a>
 6e2:	83 37       	cpi	r24, 0x73	; 115
 6e4:	71 f0       	breq	.+28     	; 0x702 <vfprintf+0x12e>
 6e6:	83 35       	cpi	r24, 0x53	; 83
 6e8:	09 f0       	breq	.+2      	; 0x6ec <vfprintf+0x118>
 6ea:	59 c0       	rjmp	.+178    	; 0x79e <vfprintf+0x1ca>
 6ec:	21 c0       	rjmp	.+66     	; 0x730 <vfprintf+0x15c>
 6ee:	f8 01       	movw	r30, r16
 6f0:	80 81       	ld	r24, Z
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	0e 5f       	subi	r16, 0xFE	; 254
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	88 24       	eor	r8, r8
 6fa:	83 94       	inc	r8
 6fc:	91 2c       	mov	r9, r1
 6fe:	53 01       	movw	r10, r6
 700:	13 c0       	rjmp	.+38     	; 0x728 <vfprintf+0x154>
 702:	28 01       	movw	r4, r16
 704:	f2 e0       	ldi	r31, 0x02	; 2
 706:	4f 0e       	add	r4, r31
 708:	51 1c       	adc	r5, r1
 70a:	f8 01       	movw	r30, r16
 70c:	a0 80       	ld	r10, Z
 70e:	b1 80       	ldd	r11, Z+1	; 0x01
 710:	36 fe       	sbrs	r3, 6
 712:	03 c0       	rjmp	.+6      	; 0x71a <vfprintf+0x146>
 714:	69 2d       	mov	r22, r9
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0x14a>
 71a:	6f ef       	ldi	r22, 0xFF	; 255
 71c:	7f ef       	ldi	r23, 0xFF	; 255
 71e:	c5 01       	movw	r24, r10
 720:	0e 94 d6 04 	call	0x9ac	; 0x9ac <strnlen>
 724:	4c 01       	movw	r8, r24
 726:	82 01       	movw	r16, r4
 728:	f3 2d       	mov	r31, r3
 72a:	ff 77       	andi	r31, 0x7F	; 127
 72c:	3f 2e       	mov	r3, r31
 72e:	16 c0       	rjmp	.+44     	; 0x75c <vfprintf+0x188>
 730:	28 01       	movw	r4, r16
 732:	22 e0       	ldi	r18, 0x02	; 2
 734:	42 0e       	add	r4, r18
 736:	51 1c       	adc	r5, r1
 738:	f8 01       	movw	r30, r16
 73a:	a0 80       	ld	r10, Z
 73c:	b1 80       	ldd	r11, Z+1	; 0x01
 73e:	36 fe       	sbrs	r3, 6
 740:	03 c0       	rjmp	.+6      	; 0x748 <vfprintf+0x174>
 742:	69 2d       	mov	r22, r9
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <vfprintf+0x178>
 748:	6f ef       	ldi	r22, 0xFF	; 255
 74a:	7f ef       	ldi	r23, 0xFF	; 255
 74c:	c5 01       	movw	r24, r10
 74e:	0e 94 cb 04 	call	0x996	; 0x996 <strnlen_P>
 752:	4c 01       	movw	r8, r24
 754:	f3 2d       	mov	r31, r3
 756:	f0 68       	ori	r31, 0x80	; 128
 758:	3f 2e       	mov	r3, r31
 75a:	82 01       	movw	r16, r4
 75c:	33 fc       	sbrc	r3, 3
 75e:	1b c0       	rjmp	.+54     	; 0x796 <vfprintf+0x1c2>
 760:	82 2d       	mov	r24, r2
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	88 16       	cp	r8, r24
 766:	99 06       	cpc	r9, r25
 768:	b0 f4       	brcc	.+44     	; 0x796 <vfprintf+0x1c2>
 76a:	b6 01       	movw	r22, r12
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 774:	2a 94       	dec	r2
 776:	f4 cf       	rjmp	.-24     	; 0x760 <vfprintf+0x18c>
 778:	f5 01       	movw	r30, r10
 77a:	37 fc       	sbrc	r3, 7
 77c:	85 91       	lpm	r24, Z+
 77e:	37 fe       	sbrs	r3, 7
 780:	81 91       	ld	r24, Z+
 782:	5f 01       	movw	r10, r30
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 78c:	21 10       	cpse	r2, r1
 78e:	2a 94       	dec	r2
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	82 1a       	sub	r8, r18
 794:	91 08       	sbc	r9, r1
 796:	81 14       	cp	r8, r1
 798:	91 04       	cpc	r9, r1
 79a:	71 f7       	brne	.-36     	; 0x778 <vfprintf+0x1a4>
 79c:	e8 c0       	rjmp	.+464    	; 0x96e <__stack+0x6f>
 79e:	84 36       	cpi	r24, 0x64	; 100
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <vfprintf+0x1d2>
 7a2:	89 36       	cpi	r24, 0x69	; 105
 7a4:	41 f5       	brne	.+80     	; 0x7f6 <vfprintf+0x222>
 7a6:	f8 01       	movw	r30, r16
 7a8:	37 fe       	sbrs	r3, 7
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <vfprintf+0x1e6>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	82 81       	ldd	r24, Z+2	; 0x02
 7b2:	93 81       	ldd	r25, Z+3	; 0x03
 7b4:	0c 5f       	subi	r16, 0xFC	; 252
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
 7b8:	08 c0       	rjmp	.+16     	; 0x7ca <vfprintf+0x1f6>
 7ba:	60 81       	ld	r22, Z
 7bc:	71 81       	ldd	r23, Z+1	; 0x01
 7be:	07 2e       	mov	r0, r23
 7c0:	00 0c       	add	r0, r0
 7c2:	88 0b       	sbc	r24, r24
 7c4:	99 0b       	sbc	r25, r25
 7c6:	0e 5f       	subi	r16, 0xFE	; 254
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	f3 2d       	mov	r31, r3
 7cc:	ff 76       	andi	r31, 0x6F	; 111
 7ce:	3f 2e       	mov	r3, r31
 7d0:	97 ff       	sbrs	r25, 7
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x212>
 7d4:	90 95       	com	r25
 7d6:	80 95       	com	r24
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	f0 68       	ori	r31, 0x80	; 128
 7e4:	3f 2e       	mov	r3, r31
 7e6:	2a e0       	ldi	r18, 0x0A	; 10
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	a3 01       	movw	r20, r6
 7ec:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__ultoa_invert>
 7f0:	88 2e       	mov	r8, r24
 7f2:	86 18       	sub	r8, r6
 7f4:	45 c0       	rjmp	.+138    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 7f6:	85 37       	cpi	r24, 0x75	; 117
 7f8:	31 f4       	brne	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	23 2d       	mov	r18, r3
 7fc:	2f 7e       	andi	r18, 0xEF	; 239
 7fe:	b2 2e       	mov	r11, r18
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	25 c0       	rjmp	.+74     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 806:	93 2d       	mov	r25, r3
 808:	99 7f       	andi	r25, 0xF9	; 249
 80a:	b9 2e       	mov	r11, r25
 80c:	8f 36       	cpi	r24, 0x6F	; 111
 80e:	c1 f0       	breq	.+48     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 810:	18 f4       	brcc	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	88 35       	cpi	r24, 0x58	; 88
 814:	79 f0       	breq	.+30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 816:	b5 c0       	rjmp	.+362    	; 0x982 <__stack+0x83>
 818:	80 37       	cpi	r24, 0x70	; 112
 81a:	19 f0       	breq	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81c:	88 37       	cpi	r24, 0x78	; 120
 81e:	21 f0       	breq	.+8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 820:	b0 c0       	rjmp	.+352    	; 0x982 <__stack+0x83>
 822:	e9 2f       	mov	r30, r25
 824:	e0 61       	ori	r30, 0x10	; 16
 826:	be 2e       	mov	r11, r30
 828:	b4 fe       	sbrs	r11, 4
 82a:	0d c0       	rjmp	.+26     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 82c:	fb 2d       	mov	r31, r11
 82e:	f4 60       	ori	r31, 0x04	; 4
 830:	bf 2e       	mov	r11, r31
 832:	09 c0       	rjmp	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	34 fe       	sbrs	r3, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 838:	29 2f       	mov	r18, r25
 83a:	26 60       	ori	r18, 0x06	; 6
 83c:	b2 2e       	mov	r11, r18
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 840:	28 e0       	ldi	r18, 0x08	; 8
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	05 c0       	rjmp	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 846:	20 e1       	ldi	r18, 0x10	; 16
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84c:	20 e1       	ldi	r18, 0x10	; 16
 84e:	32 e0       	ldi	r19, 0x02	; 2
 850:	f8 01       	movw	r30, r16
 852:	b7 fe       	sbrs	r11, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	06 c0       	rjmp	.+12     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	a3 01       	movw	r20, r6
 872:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__ultoa_invert>
 876:	88 2e       	mov	r8, r24
 878:	86 18       	sub	r8, r6
 87a:	fb 2d       	mov	r31, r11
 87c:	ff 77       	andi	r31, 0x7F	; 127
 87e:	3f 2e       	mov	r3, r31
 880:	36 fe       	sbrs	r3, 6
 882:	0d c0       	rjmp	.+26     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 884:	23 2d       	mov	r18, r3
 886:	2e 7f       	andi	r18, 0xFE	; 254
 888:	a2 2e       	mov	r10, r18
 88a:	89 14       	cp	r8, r9
 88c:	58 f4       	brcc	.+22     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 88e:	34 fe       	sbrs	r3, 4
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 892:	32 fc       	sbrc	r3, 2
 894:	09 c0       	rjmp	.+18     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 896:	83 2d       	mov	r24, r3
 898:	8e 7e       	andi	r24, 0xEE	; 238
 89a:	a8 2e       	mov	r10, r24
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 89e:	b8 2c       	mov	r11, r8
 8a0:	a3 2c       	mov	r10, r3
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a4:	b8 2c       	mov	r11, r8
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a8:	b9 2c       	mov	r11, r9
 8aa:	a4 fe       	sbrs	r10, 4
 8ac:	0f c0       	rjmp	.+30     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8ae:	fe 01       	movw	r30, r28
 8b0:	e8 0d       	add	r30, r8
 8b2:	f1 1d       	adc	r31, r1
 8b4:	80 81       	ld	r24, Z
 8b6:	80 33       	cpi	r24, 0x30	; 48
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8ba:	9a 2d       	mov	r25, r10
 8bc:	99 7e       	andi	r25, 0xE9	; 233
 8be:	a9 2e       	mov	r10, r25
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c2:	a2 fe       	sbrs	r10, 2
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c6:	b3 94       	inc	r11
 8c8:	b3 94       	inc	r11
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8cc:	8a 2d       	mov	r24, r10
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d2:	b3 94       	inc	r11
 8d4:	a3 fc       	sbrc	r10, 3
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8d8:	a0 fe       	sbrs	r10, 0
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8dc:	b2 14       	cp	r11, r2
 8de:	88 f4       	brcc	.+34     	; 0x902 <__stack+0x3>
 8e0:	28 0c       	add	r2, r8
 8e2:	92 2c       	mov	r9, r2
 8e4:	9b 18       	sub	r9, r11
 8e6:	0e c0       	rjmp	.+28     	; 0x904 <__stack+0x5>
 8e8:	b2 14       	cp	r11, r2
 8ea:	60 f4       	brcc	.+24     	; 0x904 <__stack+0x5>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 8f6:	b3 94       	inc	r11
 8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8fa:	b2 14       	cp	r11, r2
 8fc:	18 f4       	brcc	.+6      	; 0x904 <__stack+0x5>
 8fe:	2b 18       	sub	r2, r11
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
 902:	98 2c       	mov	r9, r8
 904:	21 2c       	mov	r2, r1
 906:	a4 fe       	sbrs	r10, 4
 908:	10 c0       	rjmp	.+32     	; 0x92a <__stack+0x2b>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 914:	a2 fe       	sbrs	r10, 2
 916:	17 c0       	rjmp	.+46     	; 0x946 <__stack+0x47>
 918:	a1 fc       	sbrc	r10, 1
 91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
 91c:	88 e7       	ldi	r24, 0x78	; 120
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
 922:	88 e5       	ldi	r24, 0x58	; 88
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	b6 01       	movw	r22, r12
 928:	0c c0       	rjmp	.+24     	; 0x942 <__stack+0x43>
 92a:	8a 2d       	mov	r24, r10
 92c:	86 78       	andi	r24, 0x86	; 134
 92e:	59 f0       	breq	.+22     	; 0x946 <__stack+0x47>
 930:	a1 fe       	sbrs	r10, 1
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
 934:	8b e2       	ldi	r24, 0x2B	; 43
 936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	a7 fc       	sbrc	r10, 7
 93c:	8d e2       	ldi	r24, 0x2D	; 45
 93e:	b6 01       	movw	r22, r12
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 946:	89 14       	cp	r8, r9
 948:	38 f4       	brcc	.+14     	; 0x958 <__stack+0x59>
 94a:	b6 01       	movw	r22, r12
 94c:	80 e3       	ldi	r24, 0x30	; 48
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 954:	9a 94       	dec	r9
 956:	f7 cf       	rjmp	.-18     	; 0x946 <__stack+0x47>
 958:	8a 94       	dec	r8
 95a:	f3 01       	movw	r30, r6
 95c:	e8 0d       	add	r30, r8
 95e:	f1 1d       	adc	r31, r1
 960:	80 81       	ld	r24, Z
 962:	b6 01       	movw	r22, r12
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 96a:	81 10       	cpse	r8, r1
 96c:	f5 cf       	rjmp	.-22     	; 0x958 <__stack+0x59>
 96e:	22 20       	and	r2, r2
 970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
 972:	42 ce       	rjmp	.-892    	; 0x5f8 <vfprintf+0x24>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 97e:	2a 94       	dec	r2
 980:	f6 cf       	rjmp	.-20     	; 0x96e <__stack+0x6f>
 982:	f6 01       	movw	r30, r12
 984:	86 81       	ldd	r24, Z+6	; 0x06
 986:	97 81       	ldd	r25, Z+7	; 0x07
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	2b 96       	adiw	r28, 0x0b	; 11
 990:	e2 e1       	ldi	r30, 0x12	; 18
 992:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__epilogue_restores__>

00000996 <strnlen_P>:
 996:	fc 01       	movw	r30, r24
 998:	05 90       	lpm	r0, Z+
 99a:	61 50       	subi	r22, 0x01	; 1
 99c:	70 40       	sbci	r23, 0x00	; 0
 99e:	01 10       	cpse	r0, r1
 9a0:	d8 f7       	brcc	.-10     	; 0x998 <strnlen_P+0x2>
 9a2:	80 95       	com	r24
 9a4:	90 95       	com	r25
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	08 95       	ret

000009ac <strnlen>:
 9ac:	fc 01       	movw	r30, r24
 9ae:	61 50       	subi	r22, 0x01	; 1
 9b0:	70 40       	sbci	r23, 0x00	; 0
 9b2:	01 90       	ld	r0, Z+
 9b4:	01 10       	cpse	r0, r1
 9b6:	d8 f7       	brcc	.-10     	; 0x9ae <strnlen+0x2>
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	8e 0f       	add	r24, r30
 9be:	9f 1f       	adc	r25, r31
 9c0:	08 95       	ret

000009c2 <fputc>:
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	fb 01       	movw	r30, r22
 9cc:	23 81       	ldd	r18, Z+3	; 0x03
 9ce:	21 fd       	sbrc	r18, 1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <fputc+0x16>
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	2c c0       	rjmp	.+88     	; 0xa30 <fputc+0x6e>
 9d8:	22 ff       	sbrs	r18, 2
 9da:	16 c0       	rjmp	.+44     	; 0xa08 <fputc+0x46>
 9dc:	46 81       	ldd	r20, Z+6	; 0x06
 9de:	57 81       	ldd	r21, Z+7	; 0x07
 9e0:	24 81       	ldd	r18, Z+4	; 0x04
 9e2:	35 81       	ldd	r19, Z+5	; 0x05
 9e4:	42 17       	cp	r20, r18
 9e6:	53 07       	cpc	r21, r19
 9e8:	44 f4       	brge	.+16     	; 0x9fa <fputc+0x38>
 9ea:	a0 81       	ld	r26, Z
 9ec:	b1 81       	ldd	r27, Z+1	; 0x01
 9ee:	9d 01       	movw	r18, r26
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	31 83       	std	Z+1, r19	; 0x01
 9f6:	20 83       	st	Z, r18
 9f8:	8c 93       	st	X, r24
 9fa:	26 81       	ldd	r18, Z+6	; 0x06
 9fc:	37 81       	ldd	r19, Z+7	; 0x07
 9fe:	2f 5f       	subi	r18, 0xFF	; 255
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	37 83       	std	Z+7, r19	; 0x07
 a04:	26 83       	std	Z+6, r18	; 0x06
 a06:	14 c0       	rjmp	.+40     	; 0xa30 <fputc+0x6e>
 a08:	8b 01       	movw	r16, r22
 a0a:	ec 01       	movw	r28, r24
 a0c:	fb 01       	movw	r30, r22
 a0e:	00 84       	ldd	r0, Z+8	; 0x08
 a10:	f1 85       	ldd	r31, Z+9	; 0x09
 a12:	e0 2d       	mov	r30, r0
 a14:	09 95       	icall
 a16:	89 2b       	or	r24, r25
 a18:	e1 f6       	brne	.-72     	; 0x9d2 <fputc+0x10>
 a1a:	d8 01       	movw	r26, r16
 a1c:	16 96       	adiw	r26, 0x06	; 6
 a1e:	8d 91       	ld	r24, X+
 a20:	9c 91       	ld	r25, X
 a22:	17 97       	sbiw	r26, 0x07	; 7
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	17 96       	adiw	r26, 0x07	; 7
 a28:	9c 93       	st	X, r25
 a2a:	8e 93       	st	-X, r24
 a2c:	16 97       	sbiw	r26, 0x06	; 6
 a2e:	ce 01       	movw	r24, r28
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	0f 91       	pop	r16
 a38:	08 95       	ret

00000a3a <__ultoa_invert>:
 a3a:	fa 01       	movw	r30, r20
 a3c:	aa 27       	eor	r26, r26
 a3e:	28 30       	cpi	r18, 0x08	; 8
 a40:	51 f1       	breq	.+84     	; 0xa96 <__ultoa_invert+0x5c>
 a42:	20 31       	cpi	r18, 0x10	; 16
 a44:	81 f1       	breq	.+96     	; 0xaa6 <__ultoa_invert+0x6c>
 a46:	e8 94       	clt
 a48:	6f 93       	push	r22
 a4a:	6e 7f       	andi	r22, 0xFE	; 254
 a4c:	6e 5f       	subi	r22, 0xFE	; 254
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	af 4f       	sbci	r26, 0xFF	; 255
 a56:	b1 e0       	ldi	r27, 0x01	; 1
 a58:	3e d0       	rcall	.+124    	; 0xad6 <__ultoa_invert+0x9c>
 a5a:	b4 e0       	ldi	r27, 0x04	; 4
 a5c:	3c d0       	rcall	.+120    	; 0xad6 <__ultoa_invert+0x9c>
 a5e:	67 0f       	add	r22, r23
 a60:	78 1f       	adc	r23, r24
 a62:	89 1f       	adc	r24, r25
 a64:	9a 1f       	adc	r25, r26
 a66:	a1 1d       	adc	r26, r1
 a68:	68 0f       	add	r22, r24
 a6a:	79 1f       	adc	r23, r25
 a6c:	8a 1f       	adc	r24, r26
 a6e:	91 1d       	adc	r25, r1
 a70:	a1 1d       	adc	r26, r1
 a72:	6a 0f       	add	r22, r26
 a74:	71 1d       	adc	r23, r1
 a76:	81 1d       	adc	r24, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	20 d0       	rcall	.+64     	; 0xabe <__ultoa_invert+0x84>
 a7e:	09 f4       	brne	.+2      	; 0xa82 <__ultoa_invert+0x48>
 a80:	68 94       	set
 a82:	3f 91       	pop	r19
 a84:	2a e0       	ldi	r18, 0x0A	; 10
 a86:	26 9f       	mul	r18, r22
 a88:	11 24       	eor	r1, r1
 a8a:	30 19       	sub	r19, r0
 a8c:	30 5d       	subi	r19, 0xD0	; 208
 a8e:	31 93       	st	Z+, r19
 a90:	de f6       	brtc	.-74     	; 0xa48 <__ultoa_invert+0xe>
 a92:	cf 01       	movw	r24, r30
 a94:	08 95       	ret
 a96:	46 2f       	mov	r20, r22
 a98:	47 70       	andi	r20, 0x07	; 7
 a9a:	40 5d       	subi	r20, 0xD0	; 208
 a9c:	41 93       	st	Z+, r20
 a9e:	b3 e0       	ldi	r27, 0x03	; 3
 aa0:	0f d0       	rcall	.+30     	; 0xac0 <__ultoa_invert+0x86>
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0x5c>
 aa4:	f6 cf       	rjmp	.-20     	; 0xa92 <__ultoa_invert+0x58>
 aa6:	46 2f       	mov	r20, r22
 aa8:	4f 70       	andi	r20, 0x0F	; 15
 aaa:	40 5d       	subi	r20, 0xD0	; 208
 aac:	4a 33       	cpi	r20, 0x3A	; 58
 aae:	18 f0       	brcs	.+6      	; 0xab6 <__ultoa_invert+0x7c>
 ab0:	49 5d       	subi	r20, 0xD9	; 217
 ab2:	31 fd       	sbrc	r19, 1
 ab4:	40 52       	subi	r20, 0x20	; 32
 ab6:	41 93       	st	Z+, r20
 ab8:	02 d0       	rcall	.+4      	; 0xabe <__ultoa_invert+0x84>
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__ultoa_invert+0x6c>
 abc:	ea cf       	rjmp	.-44     	; 0xa92 <__ultoa_invert+0x58>
 abe:	b4 e0       	ldi	r27, 0x04	; 4
 ac0:	a6 95       	lsr	r26
 ac2:	97 95       	ror	r25
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	ba 95       	dec	r27
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__ultoa_invert+0x86>
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	61 05       	cpc	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	08 95       	ret
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	0a 2e       	mov	r0, r26
 adc:	06 94       	lsr	r0
 ade:	57 95       	ror	r21
 ae0:	47 95       	ror	r20
 ae2:	37 95       	ror	r19
 ae4:	27 95       	ror	r18
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0xa2>
 aea:	62 0f       	add	r22, r18
 aec:	73 1f       	adc	r23, r19
 aee:	84 1f       	adc	r24, r20
 af0:	95 1f       	adc	r25, r21
 af2:	a0 1d       	adc	r26, r0
 af4:	08 95       	ret

00000af6 <__prologue_saves__>:
 af6:	2f 92       	push	r2
 af8:	3f 92       	push	r3
 afa:	4f 92       	push	r4
 afc:	5f 92       	push	r5
 afe:	6f 92       	push	r6
 b00:	7f 92       	push	r7
 b02:	8f 92       	push	r8
 b04:	9f 92       	push	r9
 b06:	af 92       	push	r10
 b08:	bf 92       	push	r11
 b0a:	cf 92       	push	r12
 b0c:	df 92       	push	r13
 b0e:	ef 92       	push	r14
 b10:	ff 92       	push	r15
 b12:	0f 93       	push	r16
 b14:	1f 93       	push	r17
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	ca 1b       	sub	r28, r26
 b20:	db 0b       	sbc	r29, r27
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	09 94       	ijmp

00000b2e <__epilogue_restores__>:
 b2e:	2a 88       	ldd	r2, Y+18	; 0x12
 b30:	39 88       	ldd	r3, Y+17	; 0x11
 b32:	48 88       	ldd	r4, Y+16	; 0x10
 b34:	5f 84       	ldd	r5, Y+15	; 0x0f
 b36:	6e 84       	ldd	r6, Y+14	; 0x0e
 b38:	7d 84       	ldd	r7, Y+13	; 0x0d
 b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b40:	b9 84       	ldd	r11, Y+9	; 0x09
 b42:	c8 84       	ldd	r12, Y+8	; 0x08
 b44:	df 80       	ldd	r13, Y+7	; 0x07
 b46:	ee 80       	ldd	r14, Y+6	; 0x06
 b48:	fd 80       	ldd	r15, Y+5	; 0x05
 b4a:	0c 81       	ldd	r16, Y+4	; 0x04
 b4c:	1b 81       	ldd	r17, Y+3	; 0x03
 b4e:	aa 81       	ldd	r26, Y+2	; 0x02
 b50:	b9 81       	ldd	r27, Y+1	; 0x01
 b52:	ce 0f       	add	r28, r30
 b54:	d1 1d       	adc	r29, r1
 b56:	0f b6       	in	r0, 0x3f	; 63
 b58:	f8 94       	cli
 b5a:	de bf       	out	0x3e, r29	; 62
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	cd bf       	out	0x3d, r28	; 61
 b60:	ed 01       	movw	r28, r26
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
